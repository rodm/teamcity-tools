
plugins {
    id 'org.gradle.maven-publish'
    id 'com.github.rodm.teamcity-agent' version '0.10'
    id 'com.github.rodm.teamcity-server' version '0.10'
    id 'com.jfrog.bintray' version '1.7.2'
}

group = 'com.github.rodm.teamcity'
version = '2.1.1'

ext {
    toolName = 'phantomjs-tool'
    toolUrl = 'https://github.com/rodm/teamcity-tools'
    toolDescription = 'PhantomJS 2.1 repackaged for TeamCity'

    serversDir = findProperty('servers.dir') ?: "$rootDir/servers"

    repositoryUrl = findProperty('repositoryUrl') ?: 'http://localhost:8080'
    repositoryUsername = findProperty('repositoryUsername') ?: ''
    repositoryPassword = findProperty('repositoryPassword') ?: ''
}

repositories {
    maven {
        url "http://dl.bintray.com/rodm/test"
    }
}

configurations {
    phantomjs
}

dependencies {
    phantomjs group: 'phantomjs', name: 'phantomjs', version: version, classifier: 'linux-x86_64', ext: 'tar.bz2'
    phantomjs group: 'phantomjs', name: 'phantomjs', version: version, classifier: 'linux-i686', ext: 'tar.bz2'
    phantomjs group: 'phantomjs', name: 'phantomjs', version: version, classifier: 'windows', ext: 'zip'
    phantomjs group: 'phantomjs', name: 'phantomjs', version: version, classifier: 'macosx', ext: 'zip'
}

agentPlugin {
    baseName = project.toolName.replace('-tool', '')
    version = ''
}

serverPlugin {
    baseName = project.toolName
    version = ''
}

def fileFilter = {
    includeEmptyDirs = false
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    exclude { details -> details.entry.name.contains('/examples/') }
    eachFile { file ->
        if (file.path.endsWith('linux-x86_64/bin/phantomjs')) {
            file.path = 'bin/linux-x86_64/phantomjs'
        } else if (file.path.endsWith('linux-i686/bin/phantomjs')) {
            file.path = 'bin/linux-i686/phantomjs'
        } else if (file.path.endsWith('phantomjs.exe')) {
            file.path = 'bin/windows/phantomjs.exe'
        } else if (file.path.endsWith('macosx/bin/phantomjs')) {
            file.path = 'bin/macosx/phantomjs'
        } else {
            file.relativePath = new RelativePath(file.relativePath.endsWithFile, file.relativePath.segments[1..-1] as String[])
        }
    }
}

teamcity {
    agent {
        descriptor {
            toolDeployment {
                executableFiles {
                    include 'bin/linux-x86_64/phantomjs'
                    include 'bin/linux-i686/phantomjs'
                    include 'bin/macosx/phantomjs'
                }
            }
        }

        files {
            configurations.phantomjs.collect { artifact ->
                if (artifact.name.endsWith('.tar.bz2')) {
                    from(tarTree(artifact), fileFilter)
                }
                if (artifact.name.endsWith('.zip')) {
                    from(zipTree(artifact), fileFilter)
                }
            }
        }
    }

    server {
        descriptor {
            name = project.toolName
            displayName = 'Repacked PhantomJS 2.1'
            version = project.version
            vendorName = 'rodm'
            vendorUrl = project.toolUrl
            description = project.toolDescription
            downloadUrl = project.toolUrl
            email = 'rod.n.mackenzie@gmail.com'
        }

        baseHomeDir = project.serversDir

        environments {
            teamcity8 {
                version = '8.1.5'
            }
            teamcity9 {
                version = '9.1.7'
            }
            teamcity10 {
                version = '10.0.2'
            }
        }
    }
}

artifacts {
    archives serverPlugin
}

publishing {
    publications {
        plugin(MavenPublication) {
            artifactId project.toolName
            artifact serverPlugin
        }
    }
    repositories {
        maven {
            url repositoryUrl
            credentials {
                username repositoryUsername
                password repositoryPassword
            }
        }
    }
}

bintray {
    user = findProperty('bintray.user')
    key = findProperty('bintray.key')

    filesSpec {
        from "${buildDir}/distributions"
        into project.version
        include '*-tool.zip'
    }

    dryRun = false
    publish = true
    override = false

    pkg {
        repo = 'teamcity-plugins-generic'
        name = project.toolName
        desc = project.toolDescription
        websiteUrl = project.toolUrl
        issueTrackerUrl = "${project.toolUrl}/issues"
        vcsUrl = "${project.toolUrl}.git"
        licenses = ['Apache-2.0']
        labels = ['teamcity', 'plugin', 'tool', 'phantomjs']

        version {
            name = project.version
        }
    }
}
